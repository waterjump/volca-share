
.field
  = label_tag :name, 'Patch name', class: 'sr-only'

  = text_field_tag 'patch[name]',
                   @patch.name || request.parameters[:name],
                   class: 'form-control-lg col-lg-12',
                   required: true,
                   placeholder: 'Patch name'

#interface.col-lg-9.form
  .stretchy
    .volca.keys
      .small.knob.midi-enabled.first-row.vco-column.lit#detune{ data: { midi: @patch.detune, control_number: 42 } }
        .notch
      .small.knob.midi-enabled.second-row.vco-column.lit#portamento{ data: { midi: @patch.portamento, control_number: 5 } }
        .notch
      .small.knob.midi-enabled.third-row.vco-column.lit#vco_eg_int{ data: { midi: @patch.vco_eg_int, control_number: 43 } }
        .notch
      .small.knob.midi-enabled.first-row.vcf-column.lit#cutoff{ data: { midi: @patch.cutoff, control_number: 44 } }
        .notch
      .small.knob.second-row.vcf-column.lit#peak{ data: { midi: @patch.peak, control_number: 0 } }
        .notch
      .small.knob.midi-enabled.third-row.vcf-column.lit#vcf_eg_int{ data: { midi: @patch.vcf_eg_int, control_number: 45 } }
        .notch
      .small.knob.midi-enabled.first-row.lfo-column.lit#lfo_rate{ data: { midi: @patch.lfo_rate, control_number: 46 } }
        .notch
      .small.knob.midi-enabled.second-row.lfo-column.lit#lfo_pitch_int{ data: { midi: @patch.lfo_pitch_int, control_number: 47 } }
        .notch
      .small.knob.midi-enabled.third-row.lfo-column.lit#lfo_cutoff_int{ data: { midi: @patch.lfo_cutoff_int, control_number: 48 } }
        .notch
      .small.knob.midi-enabled.first-row.eg-column.lit#attack{ data: { midi: @patch.attack, control_number: 49 } }
        .notch
      .small.knob.midi-enabled.second-row.eg-column.lit#decay_release{ data: { midi: @patch.decay_release, control_number: 50 } }
        .notch
      .small.knob.midi-enabled.third-row.eg-column.lit#sustain{ data: { midi: @patch.sustain, control_number: 51 } }
        .notch
      .dark.knob.midi-enabled#voice{ data: { midi: @patch.voice, control_number: 40 } }
        .notch
      .dark.knob.midi-enabled#octave{ data: { midi: @patch.octave, control_number: 41 } }
        .notch
      .small.knob.midi-enabled.unlit#delay_time{ data: { midi: @patch.delay_time, control_number: 52 } }
        .notch
      .small.knob.midi-enabled.unlit#delay_feedback{ data: { midi: @patch.delay_feedback, control_number: 53 } }
        .notch
      #led
        .digit#thousands
        .digit#hundreds
        .digit#tens
        .digit#ones

      .bottom-row
        .placeholder
        .placeholder
        .placeholder

        -# LFO SHAPE SAW
        = radio_button_tag 'patch[lfo_shape]',
                           'saw',
                           @patch.lfo_shape_saw,
                           class: :control
        = label_tag('patch[lfo_shape_saw]') do
          %span.multi
            .light{ id: 'lfo_shape_saw_light',
                    data: { radio: true },
                    class: @patch.lfo_shape_saw ? 'lit' : 'unlit' }


        -# LFO SHAPE TRI
        = radio_button_tag 'patch[lfo_shape]',
                           'triangle',
                           @patch.lfo_shape_triangle,
                           class: :control
        = label_tag('patch[lfo_shape_triangle]') do
          %span.multi
            .light{ id: 'lfo_shape_triangle_light',
                    data: { radio: true },
                    class: @patch.lfo_shape_triangle ? 'lit' : 'unlit' }

        -# LFO SHAPE SQUARE
        = radio_button_tag 'patch[lfo_shape]',
                           'square',
                           @patch.lfo_shape_square,
                           class: :control
        = label_tag('patch[lfo_shape_square]') do
          %span.multi
            .light{ id: 'lfo_shape_square_light',
                    data: { radio: true },
                    class: @patch.lfo_shape_square ? 'lit' : 'unlit' }

        -# LFO TRIGGER SYNC
        = check_box :patch,
                    :lfo_trigger_sync,
                    @patch.checked?('lfo_trigger_sync'),
                    'true',
                    'false'
        = label_tag('patch[lfo_trigger_sync]') do
          %span.on-off
            .light{ id: 'lfo_trigger_sync_light',
                    class: @patch.lit?(:lfo_trigger_sync) }

        -# TEMPO PLACEHOLDERS
        .placeholder
        .placeholder
        .placeholder

        -# METRONOME
        .placeholder

        -# STEP TRIGGER
        = check_box :patch,
                    :step_trigger,
                    @patch.checked?('step_trigger'),
                    'true',
                    'false'
        = label_tag('patch[step_trigger]') do
          %span.on-off
            .light{ id: 'step_trigger_light',
                    class: @patch.lit?(:step_trigger) }

        -# TEMPO DELAY
        = check_box :patch,
                    :tempo_delay,
                    @patch.checked?('tempo_delay'),
                    'true',
                    'false'
        = label_tag('patch[tempo_delay]') do
          %span.on-off
            .light{ id: 'tempo_delay_light',
                    class: @patch.lit?(:tempo_delay) }

  = range_field_tag 'patch[voice]', (@patch.voice || 57), in: 0..127, class: :hidden
  = range_field_tag 'patch[octave]', (@patch.octave || 57), in: 0..127, class: :hidden
  = range_field_tag 'patch[detune]', (@patch.detune || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[portamento]', (@patch.portamento || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[vco_eg_int]', (@patch.vco_eg_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[cutoff]', (@patch.cutoff || 63), in: 0..127, class: :hidden
  = range_field_tag 'patch[peak]', (@patch.peak || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[vcf_eg_int]', (@patch.vcf_eg_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[lfo_rate]', (@patch.lfo_rate || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[lfo_pitch_int]', (@patch.lfo_pitch_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[lfo_cutoff_int]', (@patch.lfo_cutoff_int || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[attack]', (@patch.attack || 0), in: 0..127, class: :hidden
  = range_field_tag 'patch[decay_release]', (@patch.decay_release || 63), in: 0..127, class: :hidden
  = range_field_tag 'patch[sustain]', (@patch.sustain || 127), in: 0..127, class: :hidden
  = range_field_tag 'patch[delay_time]', (@patch.delay_time || 127), in: 0..127, class: :hidden
  = range_field_tag 'patch[delay_feedback]', (@patch.delay_feedback || 127), in: 0..127, class: :hidden

.col-lg-3.col-md-9#patch-metadata
  %fieldset
    .field.mb-3
      = render 'shared/midi_button'
      = render 'shared/randomize'
    - if current_user.present?
      .field
        = label_tag :privacy, 'Secret?'
        = check_box :patch, :secret, @patch.checked?('secret'), 'true', 'false'
    .field
      = label_tag 'patch[tags]', 'Tags', class: 'sr-only'
      = text_field_tag 'patch[tags]',
                       @patch.formatted_tags,
                       size: '50x1',
                       class: 'form-control wtf',
                       data: { role: 'tagsinput' },
                       placeholder: 'tags, separated, by, commas'
    .field
      = label_tag 'patch[notes]', 'Notes', class: 'sr-only'
      = text_area_tag 'patch[notes]',
                      @patch.notes,
                      size: '30x5',
                      class: 'form-control',
                      placeholder: 'Description'

  - if current_user.present?
    .field
      = label_tag :audio_sample, 'Audio Sample URL'
      = render 'shared/audio_sample', button_text: '?'
      = text_field_tag 'patch[audio_sample]',
                       @patch.audio_sample,
                       class: 'form-control',
                       required: false,
                       placeholder: 'https://www.soundcloud.com/artist-name/track-name',
                       pattern: @patch.audio_sample_regex
    - if @patch.audio_sample.present?
      .sample{ data: { embed_code: @patch.audio_sample_code.try(:html_safe) }}
  - if current_user.nil? && Rails.env.production?
    = recaptcha_tags

  - if current_user.nil?
    %strong
      = "To edit or delete your patches, "
      = link_to 'create an account', new_user_registration_path
  - else
    %strong Note: Giving your patch tags, a description, and especially an audio&nbsp;sample will help it rank higher on browse pages.
#save_or_cancel.col-sm-12
  .actions
    = submit_tag 'Save', class: 'btn btn-primary'
    &nbsp;
    - if @patch.persisted?
      = link_to 'Cancel', user_keys_patch_path(@patch.user.slug, @patch.slug)
    - else
      = link_to 'Cancel', keys_patches_path
