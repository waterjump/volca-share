VS.Knob = function(element) {
  this.element = element;
  this.jElement = $(this.element);
  this.midi = () => { return this.jElement.data('midi') };
  this.trueMidi = () => { return this.jElement.data('trueMidi') };
  this.rotation = this.jElement.data('rotation') || 0;
  this.displayStyle = 'midiString';
  this.inputElement = $(`input#patch_${this.jElement.attr('id')}`);

  this.setLimits();

  this.setDisplayStyle = function() {
    if (this.jElement.attr('id').split('_')[1] === 'pitch') {
      if ($('.volca.keys').length == 0) {
        this.displayStyle = 'pitchString';
      }
    } else if (this.jElement.attr('id') === 'octave') {
      this.displayStyle = 'octaveString';
    } else if (this.jElement.attr('id') === 'tempo') {
      this.displayStyle = 'tempoString';
    }
  };

  this.setDisplayStyle();

  this.rotate = function(degree) {
    const knob = this.jElement;
    knob.css('-moz-transform', `rotate(${degree}deg)`);
    knob.css('-moz-transform-origin', '50% 50%');
    knob.css('-webkit-transform', `rotate(${degree}deg)`);
    knob.css('-webkit-transform-origin', '50% 50%');
    knob.css('-o-transform', `rotate(${degree}deg)`);
    knob.css('-o-transform-origin', '50% 50%');
    knob.css('-ms-transform', `rotate(${degree}deg)`);
    knob.css('-ms-transform-origin', '50% 50%');
  };

  this.autoRotate = function(d) {
    const scope = this;
    <% if Rails.env.test? %>
    this.jElement.css({transform: `rotate(${d}deg)`});
    <% else %>
    const currentRotation = parseInt(this.rotation);
    $({deg: currentRotation}).animate({ deg: d }, { step(now, fx) {
      scope.jElement.css({transform: `rotate(${now}deg)`});
    }
  }
    );
    <% end %>
  };

  this.setKnob = function(midiValue = this.midi()) {
    if (this.jElement.attr('id') === 'tempo') {
      this.jElement.data('super-midi', midiValue);
      midiValue = midiValue / 2.0;
    }
    this.jElement.data('midi', midiValue);
    let degree = this.degreeForMidi(midiValue, 140);
    this.jElement.data('rotation', degree);
    this.autoRotate(degree)
  };
};

VS.Knob.prototype.setLimits = function() {
  this.leftLimit = -140;
  this.rightLimit = 140;
};

VS.Knob.prototype.degreeForMidi = function(midi, limit) {
  return Math.round((midi - 63.5) / (63.5 / limit));
};

VS.Knob.prototype.midiByDegree = function(degree) {
  return Math.round(((63.5 / 140) * degree) + 63.5);
};

VS.Knob.prototype.trueMidiByDegree = function(degree) {
  return ((63.5 / 140) * degree) + 63.5;
};
